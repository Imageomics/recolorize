median_ctrs[i, ] <- median_color
}
if (plotting) {
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
graphics::layout(matrix(1:4, 1, 4),
widths = c(0.4, 0.1, 0.1, 0.4))
# original
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers)
plotImageArray(original, main = "average colors")
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(recolorize_obj$centers, horiz = FALSE)
# median
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(median_ctrs, horiz = FALSE)
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
median_ctrs)
plotImageArray(original, main = "median colors")
}
# swap out centers and return object
recolorize_obj$centers <- median_ctrs
return(recolorize_obj)
}
medianColors(rc)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
color_space = "Lab",
n_final = 2)
medianColors <- function(recolorize_obj, plotting = TRUE) {
# make a new matrix for colors
median_ctrs <- recolorize_obj$centers
# calculate median colors
for (i in 1:nrow(recolorize_obj$centers)) {
idx <- which(recolorize_obj$pixel_assignments == i)
px <- recolorize_obj$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
if (plotting) {
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
graphics::layout(matrix(1:4, 1, 4),
widths = c(0.4, 0.1, 0.1, 0.4))
# original
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers)
plotImageArray(original, main = "average colors")
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(recolorize_obj$centers, horiz = FALSE)
# median
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(median_ctrs, horiz = FALSE)
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
median_ctrs)
plotImageArray(original, main = "median colors")
}
# swap out centers and return object
recolorize_obj$centers <- median_ctrs
return(recolorize_obj)
}
medianColors(rc)
# filepath to image
img <- system.file("extdata/ocellata.png", package = "recolorize")
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
color_space = "Lab",
cutoff = 20)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
color_space = "Lab",
cutoff = 40)
medianColors(rc)
img <- "../recolorize_MS/images/Pygoplites_JRandall.png"
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
n_final = 4)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
n_final = 4, resize = 0.25)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 2,
n_final = 4, resize = 0.25)
medianColors <- function(recolorize_obj, plotting = TRUE) {
# make a new matrix for colors
median_ctrs <- recolorize_obj$centers
# calculate median colors
for (i in 1:nrow(recolorize_obj$centers)) {
idx <- which(recolorize_obj$pixel_assignments == i)
px <- recolorize_obj$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
if (plotting) {
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
graphics::layout(matrix(1:4, 1, 4),
widths = c(0.4, 0.1, 0.1, 0.4))
# original
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers)
plotImageArray(original, main = "average colors")
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(recolorize_obj$centers, horiz = FALSE)
# median
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(median_ctrs, horiz = FALSE)
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
median_ctrs)
plotImageArray(original, main = "median colors")
}
# swap out centers and return object
recolorize_obj$centers <- median_ctrs
return(recolorize_obj)
}
medianColors(rc)
img <- "../recolorize_MS/images/fulgidissima.png"
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 2,
n_final = 4, resize = 0.25)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
n_final = 4, resize = 0.25)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3, color_space = "Lab",
n_final = 4, resize = 0.25)
medianColors <- function(recolorize_obj, plotting = TRUE) {
# make a new matrix for colors
median_ctrs <- recolorize_obj$centers
# calculate median colors
for (i in 1:nrow(recolorize_obj$centers)) {
idx <- which(recolorize_obj$pixel_assignments == i)
px <- recolorize_obj$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
if (plotting) {
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
graphics::layout(matrix(1:4, 1, 4),
widths = c(0.4, 0.1, 0.1, 0.4))
# original
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers)
plotImageArray(original, main = "average colors")
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(recolorize_obj$centers, horiz = FALSE)
# median
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(median_ctrs, horiz = FALSE)
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
median_ctrs)
plotImageArray(original, main = "median colors")
}
# swap out centers and return object
recolorize_obj$centers <- median_ctrs
return(recolorize_obj)
}
medianColors(rc)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 4, color_space = "Lab",
n_final = 4, resize = 0.25)
medianColors <- function(recolorize_obj, plotting = TRUE) {
# make a new matrix for colors
median_ctrs <- recolorize_obj$centers
# calculate median colors
for (i in 1:nrow(recolorize_obj$centers)) {
idx <- which(recolorize_obj$pixel_assignments == i)
px <- recolorize_obj$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
if (plotting) {
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
graphics::layout(matrix(1:4, 1, 4),
widths = c(0.4, 0.1, 0.1, 0.4))
# original
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers)
plotImageArray(original, main = "average colors")
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(recolorize_obj$centers, horiz = FALSE)
# median
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(median_ctrs, horiz = FALSE)
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
median_ctrs)
plotImageArray(original, main = "median colors")
}
# swap out centers and return object
recolorize_obj$centers <- median_ctrs
return(recolorize_obj)
}
medianColors(rc)
library(recolorize)
?medianColors
devtools::load_all(".")
library(recolorize)
install.packages("roxygen2")
install.packages("imager")
install.packages("png", "pavo", "colorRamps", "plotfunctions")
version()
version
install.packages("pavo")
install.packages("colorRamps")
install.packages("plotfunctions")
install.packages("abind")
install.packages("plot#D")
install.packages("plot3D")
library(recolorize)
install.packages("smoothr")
install.packages("rmarkdown")
swirl()
install.packages("swirl")
swirl()
library(swirl)
library(swirl)
swirl()
5+7
x <- 5 + 7
x
x - 3
y <- x - 3
y
z <- c(1, 9, 3)
z <- c(1.1, 9, 3.14)
?c
z
quit()
img <- "../help/finn_denticles/PhotoforHannah.jpg"
devtools::load_all(".")
img <- readImage(img)
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
alpha_channel
lower = rep(0.9, 3)
upper = rep(1, 3)
transparent = TRUE
bg_condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha_channel = alpha_channel)
backgroundCondition()
bg_condition
# index background
bg_indexed <- backgroundIndex(img, bg_condition)
bg_indexed
bg_indexed$idx
dim(bg_indexed)
dim(bg_indexed$idx)
dim(bg_indexed$idx_flat)
dim(img)
!alpha_channel
nrow(img)
a <- matrix(1, nrow = nrow(img), ncol = ncol(img))
a[bg_indexed$idx_flat] <- 0
image(a)
image(a, asp = 1)
dim(a)
dim(img)
devtools::load_all(".")
library(recolorize)
devtools::load_all(".")
library(recolorize)
devtools::install_github("hiweller/recolorize")
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab",
bins = 8)
img_path <- "PhotoforHannah.jpg"
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab",
bins = 8)
img_path <- "../help/finn_denticles/PhotoforHannah.jpg"
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab",
bins = 8)
img <- readImage(img_path, resize = 0.2)
img
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
lower
lower = rep(0.9, 1)
upper = rep(1, 3)
lower = rep(0.9, 3)
transparent = TRUE
bg_condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha_channel = alpha_channel)
# index background
bg_indexed <- backgroundIndex(img, bg_condition)
# returnables:
original_img <- img
# add an alpha channel if there is none
if (!alpha_channel) {
a <- matrix(1, nrow = nrow(img), ncol = ncol(img))
a[bg_indexed$idx_flat] <- 0
original_img <- abind::abind(original_img, a, along = 3)
}
dim(a)
dim(img)
dim(original_ig)
dim(original_img)
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab")
dim(original_img)
plotImageArray()
plotImageArray(original_img)
method = "histogram"
bins = 2
color_space = "sRGB"
lower
upper
resid = F
resize = NULL
rotate = NULL
resize = 0.2
# get method
method <- match.arg(method)
method
img_path
img <- readImage(img, resize = resize, rotate = rotate)
img <- readImage(img_path, resize = resize, rotate = rotate)
dim(mig)
dim(img)
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
bg_condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha_channel = alpha_channel)
# index background
bg_indexed <- backgroundIndex(img, bg_condition)
# color clusters & assign pixels
color_clusters <- colorClusters(bg_indexed, method = method,
n = n, bins = bins,
color_space = color_space,
ref_white = ref_white)
ref_white = "D65"
# color clusters & assign pixels
color_clusters <- colorClusters(bg_indexed, method = method,
n = n, bins = bins,
color_space = color_space,
ref_white = ref_white)
# get sizes vector
sizes <- color_clusters$sizes
if (scale_palette) { s <- sizes } else { s <- NULL }
scale_palette = TRUE
# get sizes vector
sizes <- color_clusters$sizes
if (scale_palette) { s <- sizes } else { s <- NULL }
# returnables:
original_img <- img
# add an alpha channel if there is none
if (!alpha_channel) {
a <- matrix(1, nrow = nrow(img), ncol = ncol(img))
a[bg_indexed$idx_flat] <- 0
original_img <- abind::abind(original_img, a, along = 3)
}
devtools::load_all(".")
library(recolorize)
img_path <- "../help/finn_denticles/PhotoforHannah.jpg"
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab")
devtools::load_all(".")
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab")
original_img <- abind::abind(original_img, a)
devtools::load_all(".")
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab")
original_img
dim(original_img)
img <- readImage(img, resize = resize, rotate = rotate)
# returnables:
original_img <- img
dim(original_img)
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
alpha_channel
!alpha_channel
a <- matrix(1, nrow = nrow(img), ncol = ncol(img))
a
dim(a)
a[bg_indexed$idx_flat] <- 0
dim(a)
original_img <- abind::abind(original_img, a)
plotImageArray(original_img)
plotImageArray(original_img[,,4])
devtools::load_all(".")
img_path <- "../help/finn_denticles/PhotoforHannah.jpg"
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab")
init_fit <- recolorize(img_path, lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
color_space = "Lab")
library(recolorize)
img_path <- "../help/finn_denticles/PhotoforHannah.jpg"
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
color_space = "Lab")
init_fit <- recolorize2(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 3,
color_space = "Lab")
init_fit <- recolorize2(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 4,
color_space = "Lab")
init_fit <- recolorize2(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 5,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 2,
color_space = "Lab")
init_fit <- recolorize2(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 2,
color_space = "Lab")
init_fit <- recolorize2(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 3,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 4,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 5,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
bins = 2,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
bins = 5,
color_space = "Lab")
