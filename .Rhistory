current_par <- graphics::par(no.readonly = TRUE)
graphics::par(mar = c(0, 0, 2, 0))
layout(matrix(1:2, nrow = 1))
par(mar = rep(0, 4))
im_dist <- imDist(im1 = raster_to_array(recluster_fit$original_img),
im2 = recoloredImage(recluster_fit), color_space = "Lab")
rc_hist <- recolorize(img, method = "hist", bins = 2, color_space = "sRGB")
layout(matrix(1:2, nrow = 1))
par(mar = rep(0, 4))
im_dist <- imDist(im1 = raster_to_array(recluster_fit$original_img),
im2 = recoloredImage(recluster_fit), color_space = "Lab")
recluster_fit <- recluster(rc_hist, cutoff = 45)
layout(matrix(1:2, nrow = 1))
layout(matrix(1:2, nrow = 1))
par(mar = rep(0, 4))
im_dist <- imDist(im1 = raster_to_array(recluster_fit$original_img),
im2 = recoloredImage(recluster_fit), color_space = "Lab")
imHeatmap(im_dist, palette = colorRamps::ygobb(100),
legend = FALSE)
devtools::check_win_release()
devtools::build_vignettes()
devtools::check_win_release()
devtools::check_rhub()
devtools::release()
devtools::check_win_release()
devtools::check_rhub()
install.packages("updateR")
install.packages("installr")
installr::updateR()
devtools::check_win_devel()
install.packages("htmltools")
par(mar = rep(0, 4))
red_fill <- editLayer(refined_fit, layer_idx = 3,
operation = "fill", px_size = 2,
plotting = TRUE)
refined_fit <- recluster(init_fit, cutoff = 45)
adj <- recolorize_adjacency(final_fit, coldist = "default", hsl = "default")
adj <- recolorize_adjacency(final_fit, coldist = "default", hsl = "default")
library(recolorize)
init_fit <- recolorize(img, method = "hist", bins = 2,
color_space = "sRGB")
library(recolorize)
# get the path to the image (comes with the package, so we use system.file):
img <- system.file("extdata/corbetti.png", package = "recolorize")
# fit a color map (only provided parameter is a color similarity cutoff)
recolorize_obj <- recolorize2(img, cutoff = 45)
init_fit <- recolorize(img, method = "hist", bins = 2,
color_space = "sRGB")
refined_fit <- recluster(init_fit, cutoff = 45)
final_fit <- editLayer(refined_fit, 3,
operation = "fill", px_size = 4)
adj <- recolorize_adjacency(final_fit, coldist = "default", hsl = "default")
print(adj[ , c(57:62)]) # just print the chromatic and achromatic boundary strength values
adj <- recolorize_adjacency(final_fit, coldist = "default", hsl = "default")
print(adj[ , grep("m_dL|m_dS", colnames(adj))]) # just print the chromatic and achromatic boundary strength values
library(recolorize)
library(recolorize)
devtools::check()
library(recolorize)
current_par <- graphics::par(no.readonly = TRUE)
graphics::par(mar = c(0, 0, 2, 0))
par(mar = rep(0, 4))
plotColorPalette(recluster_fit$centers, recluster_fit$sizes)
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_win_devel()
devtools::check_win_release()
devtools::release()
devtools::release()
devtools::release()
Sys.getenv()
devtools::release()
?recolorize
library(recolorize)
?recolorize
# filepath to image
img <- system.file("extdata/chongi.png", package = "recolorize")
# default: histogram, 2 bins/channel
rc <- recolorize(img)
# filepath to image
img <- system.file("extdata/fulgidissima.png", package = "recolorize")
# default: histogram, 2 bins/channel
rc <- recolorize(img)
# default: histogram, 2 bins/channel
rc <- recolorize(img, bins = 3)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3, cutoff = 25)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3, cutoff = 45)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
cutoff = 45,
color_space = "Lab")
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
cutoff = 45,
color_space = "Lab",
channels = 2:3)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
cutoff = 40,
color_space = "Lab",
channels = 2:3)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
cutoff = 40,
color_space = "Lab",
channels = 1:3)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 4,
cutoff = 40,
color_space = "Lab",
channels = 1:3)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 4,
n_final = 3)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 4,
color_space = "Lab",
n_final = 3)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
color_space = "Lab",
n_final = 3)
# default: histogram, 2 bins/channel
rc <- recolorize(img, bins = 2)
# default: histogram, 2 bins/channel
rc <- recolorize(img, bins = 2, color_space = "Lab")
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 2, color_space = "Lab", cutoff = 10)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3, color_space = "Lab", cutoff = 10)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
color_space = "Lab",
cutoff = 30)
install.packages("smoothr")
library(recolorize)
# median colors...?
map <- rc$pixel_assignments
# median colors...?
map <- which(rc$pixel_assignments == 1)
px <- rc$original_img[map]
px
test <- col2rgb(px)
head(test)
dim(test)
test <- t(col2rgb(px))
test2 <- apply(test, 2, median)
median_color <- apply(as_rgb, 1, median)
# median colors...?
median_ctrs <- rc$centers
for (i in 1:nrow(rc$centers)) {
idx <- which(rc$pixel_assignments == i)
px <- rc$original_img[idx]
as_rgb <- col2rgb(px)
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
plotColorPalette(median_ctrs)
# median colors...?
median_ctrs <- rc$centers
for (i in 1:nrow(rc$centers)) {
idx <- which(rc$pixel_assignments == i)
px <- rc$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
plotColorPalette(median_ctrs)
library(recolorize)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
color_space = "Lab",
cutoff = 30)
# median colors...?
median_ctrs <- rc$centers
for (i in 1:nrow(rc$centers)) {
idx <- which(rc$pixel_assignments == i)
px <- rc$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
plotColorPalette(median_ctrs)
rc$centers <- median_ctrs
plot(rc)
# filepath to image
img <- system.file("extdata/fulgidissima.png", package = "recolorize")
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
color_space = "Lab",
cutoff = 30)
# median colors...?
median_ctrs <- rc$centers
for (i in 1:nrow(rc$centers)) {
idx <- which(rc$pixel_assignments == i)
px <- rc$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
plotColorPalette(median_ctrs)
plot(rc)
rc$centers <- median_ctrs
plot(rc)
library(recolorize)
medianColors <- function(recolorize_obj, plotting = TRUE) {
# make a new matrix for colors
median_ctrs <- recolorize_obj$centers
# calculate median colors
for (i in 1:nrow(recolorize_obj$centers)) {
idx <- which(recolorize_obj$pixel_assignments == i)
px <- recolorize_obj$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
if (plotting) {
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
graphics::layout(matrix(1:4, 1, 4),
widths = c(0.4, 0.1, 0.1, 0.4))
# original
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers)
plotImageArray(original, main = "average colors")
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(recolorize_obj$centers)
# median
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(median_ctrs)
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
median_ctrs)
plotImageArray(original, main = "median colors")
}
# swap out centers and return object
recolorize_obj$centers <- median_ctrs
return(recolorize_obj)
}
medianColors(rc)
medianColors <- function(recolorize_obj, plotting = TRUE) {
# make a new matrix for colors
median_ctrs <- recolorize_obj$centers
# calculate median colors
for (i in 1:nrow(recolorize_obj$centers)) {
idx <- which(recolorize_obj$pixel_assignments == i)
px <- recolorize_obj$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
if (plotting) {
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
graphics::layout(matrix(1:4, 1, 4),
widths = c(0.4, 0.1, 0.1, 0.4))
# original
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers)
plotImageArray(original, main = "average colors")
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(recolorize_obj$centers, horiz = FALSE)
# median
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(median_ctrs, horiz = FALSE)
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
median_ctrs)
plotImageArray(original, main = "median colors")
}
# swap out centers and return object
recolorize_obj$centers <- median_ctrs
return(recolorize_obj)
}
medianColors(rc)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
color_space = "Lab",
n_final = 2)
medianColors <- function(recolorize_obj, plotting = TRUE) {
# make a new matrix for colors
median_ctrs <- recolorize_obj$centers
# calculate median colors
for (i in 1:nrow(recolorize_obj$centers)) {
idx <- which(recolorize_obj$pixel_assignments == i)
px <- recolorize_obj$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
if (plotting) {
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
graphics::layout(matrix(1:4, 1, 4),
widths = c(0.4, 0.1, 0.1, 0.4))
# original
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers)
plotImageArray(original, main = "average colors")
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(recolorize_obj$centers, horiz = FALSE)
# median
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(median_ctrs, horiz = FALSE)
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
median_ctrs)
plotImageArray(original, main = "median colors")
}
# swap out centers and return object
recolorize_obj$centers <- median_ctrs
return(recolorize_obj)
}
medianColors(rc)
# filepath to image
img <- system.file("extdata/ocellata.png", package = "recolorize")
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
color_space = "Lab",
cutoff = 20)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
color_space = "Lab",
cutoff = 40)
medianColors(rc)
img <- "../recolorize_MS/images/Pygoplites_JRandall.png"
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
n_final = 4)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
n_final = 4, resize = 0.25)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 2,
n_final = 4, resize = 0.25)
medianColors <- function(recolorize_obj, plotting = TRUE) {
# make a new matrix for colors
median_ctrs <- recolorize_obj$centers
# calculate median colors
for (i in 1:nrow(recolorize_obj$centers)) {
idx <- which(recolorize_obj$pixel_assignments == i)
px <- recolorize_obj$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
if (plotting) {
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
graphics::layout(matrix(1:4, 1, 4),
widths = c(0.4, 0.1, 0.1, 0.4))
# original
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers)
plotImageArray(original, main = "average colors")
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(recolorize_obj$centers, horiz = FALSE)
# median
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(median_ctrs, horiz = FALSE)
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
median_ctrs)
plotImageArray(original, main = "median colors")
}
# swap out centers and return object
recolorize_obj$centers <- median_ctrs
return(recolorize_obj)
}
medianColors(rc)
img <- "../recolorize_MS/images/fulgidissima.png"
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 2,
n_final = 4, resize = 0.25)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3,
n_final = 4, resize = 0.25)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 3, color_space = "Lab",
n_final = 4, resize = 0.25)
medianColors <- function(recolorize_obj, plotting = TRUE) {
# make a new matrix for colors
median_ctrs <- recolorize_obj$centers
# calculate median colors
for (i in 1:nrow(recolorize_obj$centers)) {
idx <- which(recolorize_obj$pixel_assignments == i)
px <- recolorize_obj$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
if (plotting) {
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
graphics::layout(matrix(1:4, 1, 4),
widths = c(0.4, 0.1, 0.1, 0.4))
# original
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers)
plotImageArray(original, main = "average colors")
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(recolorize_obj$centers, horiz = FALSE)
# median
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(median_ctrs, horiz = FALSE)
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
median_ctrs)
plotImageArray(original, main = "median colors")
}
# swap out centers and return object
recolorize_obj$centers <- median_ctrs
return(recolorize_obj)
}
medianColors(rc)
# default: histogram, 2 bins/channel
rc <- recolorize2(img, bins = 4, color_space = "Lab",
n_final = 4, resize = 0.25)
medianColors <- function(recolorize_obj, plotting = TRUE) {
# make a new matrix for colors
median_ctrs <- recolorize_obj$centers
# calculate median colors
for (i in 1:nrow(recolorize_obj$centers)) {
idx <- which(recolorize_obj$pixel_assignments == i)
px <- recolorize_obj$original_img[idx]
as_rgb <- col2rgb(px) / 255
median_color <- apply(as_rgb, 1, median)
median_ctrs[i, ] <- median_color
}
if (plotting) {
# reset graphical parameters when function exits:
current_par <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(current_par))
graphics::layout(matrix(1:4, 1, 4),
widths = c(0.4, 0.1, 0.1, 0.4))
# original
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers)
plotImageArray(original, main = "average colors")
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(recolorize_obj$centers, horiz = FALSE)
# median
# plotting palette
graphics::par(mar = rep(0.5, 4))
plotColorPalette(median_ctrs, horiz = FALSE)
# plotting image
graphics::par(mar = c(0, 0, 2, 0))
original <- constructImage(recolorize_obj$pixel_assignments,
median_ctrs)
plotImageArray(original, main = "median colors")
}
# swap out centers and return object
recolorize_obj$centers <- median_ctrs
return(recolorize_obj)
}
medianColors(rc)
library(recolorize)
?medianColors
devtools::load_all(".")
library(recolorize)
install.packages("roxygen2")
install.packages("imager")
install.packages("png", "pavo", "colorRamps", "plotfunctions")
version()
version
install.packages("pavo")
install.packages("colorRamps")
install.packages("plotfunctions")
install.packages("abind")
install.packages("plot#D")
install.packages("plot3D")
library(recolorize)
install.packages("smoothr")
install.packages("rmarkdown")
