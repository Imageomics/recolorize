?c
z
quit()
img <- "../help/finn_denticles/PhotoforHannah.jpg"
devtools::load_all(".")
img <- readImage(img)
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
alpha_channel
lower = rep(0.9, 3)
upper = rep(1, 3)
transparent = TRUE
bg_condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha_channel = alpha_channel)
backgroundCondition()
bg_condition
# index background
bg_indexed <- backgroundIndex(img, bg_condition)
bg_indexed
bg_indexed$idx
dim(bg_indexed)
dim(bg_indexed$idx)
dim(bg_indexed$idx_flat)
dim(img)
!alpha_channel
nrow(img)
a <- matrix(1, nrow = nrow(img), ncol = ncol(img))
a[bg_indexed$idx_flat] <- 0
image(a)
image(a, asp = 1)
dim(a)
dim(img)
devtools::load_all(".")
library(recolorize)
devtools::load_all(".")
library(recolorize)
devtools::install_github("hiweller/recolorize")
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab",
bins = 8)
img_path <- "PhotoforHannah.jpg"
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab",
bins = 8)
img_path <- "../help/finn_denticles/PhotoforHannah.jpg"
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab",
bins = 8)
img <- readImage(img_path, resize = 0.2)
img
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
lower
lower = rep(0.9, 1)
upper = rep(1, 3)
lower = rep(0.9, 3)
transparent = TRUE
bg_condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha_channel = alpha_channel)
# index background
bg_indexed <- backgroundIndex(img, bg_condition)
# returnables:
original_img <- img
# add an alpha channel if there is none
if (!alpha_channel) {
a <- matrix(1, nrow = nrow(img), ncol = ncol(img))
a[bg_indexed$idx_flat] <- 0
original_img <- abind::abind(original_img, a, along = 3)
}
dim(a)
dim(img)
dim(original_ig)
dim(original_img)
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab")
dim(original_img)
plotImageArray()
plotImageArray(original_img)
method = "histogram"
bins = 2
color_space = "sRGB"
lower
upper
resid = F
resize = NULL
rotate = NULL
resize = 0.2
# get method
method <- match.arg(method)
method
img_path
img <- readImage(img, resize = resize, rotate = rotate)
img <- readImage(img_path, resize = resize, rotate = rotate)
dim(mig)
dim(img)
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
bg_condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha_channel = alpha_channel)
# index background
bg_indexed <- backgroundIndex(img, bg_condition)
# color clusters & assign pixels
color_clusters <- colorClusters(bg_indexed, method = method,
n = n, bins = bins,
color_space = color_space,
ref_white = ref_white)
ref_white = "D65"
# color clusters & assign pixels
color_clusters <- colorClusters(bg_indexed, method = method,
n = n, bins = bins,
color_space = color_space,
ref_white = ref_white)
# get sizes vector
sizes <- color_clusters$sizes
if (scale_palette) { s <- sizes } else { s <- NULL }
scale_palette = TRUE
# get sizes vector
sizes <- color_clusters$sizes
if (scale_palette) { s <- sizes } else { s <- NULL }
# returnables:
original_img <- img
# add an alpha channel if there is none
if (!alpha_channel) {
a <- matrix(1, nrow = nrow(img), ncol = ncol(img))
a[bg_indexed$idx_flat] <- 0
original_img <- abind::abind(original_img, a, along = 3)
}
devtools::load_all(".")
library(recolorize)
img_path <- "../help/finn_denticles/PhotoforHannah.jpg"
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab")
devtools::load_all(".")
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab")
original_img <- abind::abind(original_img, a)
devtools::load_all(".")
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab")
original_img
dim(original_img)
img <- readImage(img, resize = resize, rotate = rotate)
# returnables:
original_img <- img
dim(original_img)
# make background condition
alpha_channel <- dim(img)[3] == 4 # is there a transparency channel?
alpha_channel
!alpha_channel
a <- matrix(1, nrow = nrow(img), ncol = ncol(img))
a
dim(a)
a[bg_indexed$idx_flat] <- 0
dim(a)
original_img <- abind::abind(original_img, a)
plotImageArray(original_img)
plotImageArray(original_img[,,4])
devtools::load_all(".")
img_path <- "../help/finn_denticles/PhotoforHannah.jpg"
init_fit <- recolorize(img_path, resize = 0.2,
color_space = "Lab")
init_fit <- recolorize(img_path, lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
color_space = "Lab")
library(recolorize)
img_path <- "../help/finn_denticles/PhotoforHannah.jpg"
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
color_space = "Lab")
init_fit <- recolorize2(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 3,
color_space = "Lab")
init_fit <- recolorize2(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 4,
color_space = "Lab")
init_fit <- recolorize2(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 5,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 2,
color_space = "Lab")
init_fit <- recolorize2(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 2,
color_space = "Lab")
init_fit <- recolorize2(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 3,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 4,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
resize = 0.2,
bins = 5,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
bins = 2,
color_space = "Lab")
init_fit <- recolorize(img_path,
lower = rep(0.9, 3),
upper = rep(1, 3),
bins = 5,
color_space = "Lab")
?match.call
match.call(get, call("get", "abc", i = FALSE, p = 3))
# first assert palette types:
is_color <- function(sapply(x, function(X) {
# first assert palette types:
is_color <- function(x) {
sapply(x, function(X) {
tryCatch(is.matrix(col2rgb(X)),
error = function(e) FALSE)
})
}
pal_list <- list(ref = reference_palette,
mat = match_palette)
reference_palette <- c("blue", "olivedrab", "tomato", "blanchedalmond", "chocolate4")
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- recolorize2(img, bins = 2, cutoff = 45)
devtools::load_all(".")
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- recolorize2(img, bins = 2, cutoff = 45)
match_palette <- rc$centers
pal_list <- list(ref = reference_palette,
mat = match_palette)
# first assert palette types:
is_color <- function(x) {
sapply(x, function(X) {
tryCatch(is.matrix(col2rgb(X)),
error = function(e) FALSE)
})
}
lapply(pal_list, \(x) all(is_color(x)))
is_color(match_palette)
col2rgb(match_palette)
is_color("#444")
i = pal_list[[1]]
if(all(is.character(i))) {
is_color(i)
}
all(lapply(pal_list, \(x) ncol(x) == 3))
lapply(pal_list, \(x) ncol(x) == 3)
for (i in 1:length(pal_list)) {
# if it's hex codes/color names, convert to a color matrix
if(all(is.character(pal_list[[i]])) & all(is_color(pal_list[[i]]))) {
pal_list[[i]] <- t(col2rgb(pal) / 255)
}
#if(all(lapply(pal_list, \(x) ncol(x) == 3)))
}
for (i in 1:length(pal_list)) {
# if it's hex codes/color names, convert to a color matrix
if(all(is.character(pal_list[[i]])) & all(is_color(pal_list[[i]]))) {
pal_list[[i]] <- t(col2rgb(pal_list[[i]]) / 255)
}
#if(all(lapply(pal_list, \(x) ncol(x) == 3)))
}
if(all(lapply(pal_list, \(x) ncol(x) == 3)))
{print("ok")}
all(lapply(pal_list, \(x) ncol(x) == 3))
lapply(pal_list, \(x) ncol(x) == 3)
max(pal_list)
lapply(pal_list, max)
max(lapply(pal_list, max))
max(unlist(lapply(pal_list, max)))
# make sure they have the same range:
if (max(unlist(lapply(pal_list, max)))) <= 1) {
# make sure they have the same range:
if (max(unlist(lapply(pal_list, max))) <= 1) {
box <- c(0, 1)
} else {
box <- c(0, 255)
}
box
# Use pp3 function from spatstat.geom package to create 3D point pattern objects
# for use with solve_LSAP
imgA <- spatstat.geom::pp3(pal_list$ref[[1]][, 1],
pal_list$ref[[1]][, 2],
pal_list$ref[[1]][, 3],
spatstat.geom::box3(box))
# Use pp3 function from spatstat.geom package to create 3D point pattern objects
# for use with solve_LSAP
imgA <- spatstat.geom::pp3(pal_list$ref[[1]][, 1],
pal_list$ref[[1]][, 2],
pal_list$ref[[1]][, 3],
spatstat.geom::box3(box))
pal_list$ref
# Use pp3 function from spatstat.geom package to create 3D point pattern objects
# for use with solve_LSAP
imgA <- spatstat.geom::pp3(pal_list$ref[, 1],
pal_list$ref[, 2],
pal_list$ref[, 3],
spatstat.geom::box3(box))
# Use pp3 function from spatstat.geom package to create 3D point pattern objects
# for use with solve_LSAP
ref_pp3 <- spatstat.geom::pp3(pal_list$ref[, 1],
pal_list$ref[, 2],
pal_list$ref[, 3],
spatstat.geom::box3(box))
# Order each subsequent dataframe by the clusters in the first element
mat_pp3 <- spatstat.geom::pp3(pal_list$mat[, 1],
pal_list$mat[, 2],
pal_list$mat[, 3],
spatstat.geom::box3(box))
# Use solve_LSAP from clue package to get the minimum sum of distances
# between point pairs (implements Hungarian Algorithm)
orders <- clue::solve_LSAP(dist.matrix, maximum = FALSE)
# Get distance matrix between the two
dist.matrix <- spatstat.geom::crossdist(ref_pp3, mat_pp3)
# Use solve_LSAP from clue package to get the minimum sum of distances
# between point pairs (implements Hungarian Algorithm)
orders <- clue::solve_LSAP(dist.matrix, maximum = FALSE)
orders
orders$
FD
orders[1]
usethis::use_package("clue", type = "Suggests")
usethis::use_package(spatstat.geom, type = "Suggests")
usethis::use_package("spatstat.geom", type = "Suggests")
layout(matrix(1:2, nrow = 2)); par(mar = rep(1, 4))
plotColorPalette(pal_list$ref)
plotColorPalette(pal_list$mat[orders, ])
match_palette
plot(rc2)
plot(rc)
rc$centers
rgb(rc$centers)
?col2col
color_space = "Lab"
lapply(pal_list2, \(x) col2col(x, from = "sRGB", to = color_space))
# convert to the right color space:
pal_list2 <- pal_list
lapply(pal_list2, \(x) col2col(x, from = "sRGB", to = color_space))
# convert to the right color space:
pal_list_2 <- lapply(pal_list, \(x) col2col(x, from = "sRGB", to = color_space))
# make sure they have the same range:
lapply(pal_list_2, range)
devtools::load_all(".")
devtools::load_all(".")
#'
#' @details While you can manually specify the `col_order` vector, one way to
#'   automatically order the colors according to an external color palette (as
#'   might be needed for batch processing) is to use the [match_colors] function,
#'   although it is recommended to double-check the results.
#'
#' @return A `recolorize` object.
#'
#' @example
#'
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 45)
ref_palette <- c("mediumblue", "olivedrab", "tomato2", "beige", "chocolate4")
col_order <- match_colors(ref_palette, rc$centers, plotting = TRUE)
devtools::load_all(".")
devtools::load_all(".")
#'
#' @details While you can manually specify the `col_order` vector, one way to
#'   automatically order the colors according to an external color palette (as
#'   might be needed for batch processing) is to use the [match_colors] function,
#'   although it is recommended to double-check the results.
#'
#' @return A `recolorize` object.
#'
#' @example
#' #'
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 45)
ref_palette <- c("mediumblue", "olivedrab", "tomato2", "beige", "chocolate4")
col_order <- match_colors(ref_palette, rc$centers, plotting = TRUE)
devtools::load_all(".")
#'   might be needed for batch processing) is to use the [match_colors] function,
#'   although it is recommended to double-check the results.
#'
#' @return A `recolorize` object.
#'
#' @examples
#' img <- system.file("extdata/corbetti.png", package = "recolorize")
#' rc <- recolorize2(img, cutoff = 45)
#' ref_palette <- c("mediumblue", "olivedrab", "tomato2", "beige", "chocolate4")
#' col_order <- match_colors(ref_palette, rc$centers, plotting = TRUE)
rc2 <- reorder_colors(rc, col_order, plotting = FALSE)
#'
#' # the colors are reordered, but not changed to match the reference palette:
plot(rc2)
#'
#' # you can also change them to the reference palette:
rc2$centers <- ref_palette
plot(rc2$centers)
#'
#' # you can also change them to the reference palette:
rc2$centers <- t(col2rgb(ref_palette) / 255)
plot(rc2$centers)
#'
#' # you can also change them to the reference palette:
rc2$centers <- t(col2rgb(ref_palette) / 255)
plot(rc2$centers)
plot(rc2)
#' @details While you can manually specify the `col_order` vector, one way to
#'   automatically order the colors according to an external color palette (as
#'   might be needed for batch processing) is to use the [match_colors] function,
#'   although it is recommended to double-check the results.
#'
#' @return A `recolorize` object.
#'
#' @examples
#' img <- system.file("extdata/corbetti.png", package = "recolorize")
#' rc <- recolorize2(img, cutoff = 45)
ref_palette <- c("mediumblue", "olivedrab", "tomato2", "beige", "grey10")
col_order <- match_colors(ref_palette, rc$centers, plotting = TRUE)
rc2 <- reorder_colors(rc, col_order, plotting = FALSE)
#'
#' # the colors are reordered, but not changed to match the reference palette:
plot(rc2)
#'
#' # you can also change them to the reference palette:
rc2$centers <- t(col2rgb(ref_palette) / 255)
# admittedly, this looks kind of bananas:
plot(rc2)
devtools::load_all(".")
devtools::load_all(".")
install.packages("qpdf")
devtools::load_all(".")
rc
img
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 45)
recolorize_obj <- rc
rc <- recolorize2(img, cutoff = 30)
recolorize_obj <- rc
pct = 0.05
# threshold cutoff:
pct <- 1 - pct
# get sizes:
sizes <- recolorize_obj$sizes
# get size order:
size_order <- order(sizes, decreasing = TRUE)
# normalize so we get proportions:
size_norm <- sizes[size_order] / sum(sizes)
# take cumulative sum, and only take those clusters whose cumulative
# sum is enough to reach the cutoff:
keep_idx <- size_order[1:which(cumsum(size_norm) >= pct)[1]]
# refit, using those colors
img <- raster_to_array(recolorize_obj$original_img)
refit <- imposeColors(img = img,
centers = recolorize_obj$centers[keep_idx, ],
plotting = FALSE,
...)
refit <- imposeColors(img = img,
centers = recolorize_obj$centers[keep_idx, ],
plotting = FALSE)
refit$call
devtools::load_all(".")
test <- thresholdRecolor(rc)
test$call
?match.call
recolorize_obj$call
test <- thresholdRecolor(rc, pct = 0.05)
recolorize_obj$call
test$call
pkgdown::check_pkgdown()
devtools::load_all(".")
?recolorize
img <- system.file("extdata/chongi.png", package = "recolorize")
centers[j, 1:3] <- sqrt(colMeans(pix_temp^2))
img <- system.file("extdata/chongi.png", package = "recolorize")
sizes[j] <- nrow(pix_temp)
img <- system.file("extdata/chongi.png", package = "recolorize")
rc <- recolorize(img)
devtools::load_all(".")
rc <- recolorize(img)
